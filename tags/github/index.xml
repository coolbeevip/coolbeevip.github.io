<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on</title><link>https://coolbeevip.github.io/tags/github/</link><description>Recent content in Github on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Aug 2024 13:24:14 +0800</lastBuildDate><atom:link href="https://coolbeevip.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Batch Deleting GitHub Actions Records with a Bash Script</title><link>https://coolbeevip.github.io/posts/github/github-cli/</link><pubDate>Sun, 04 Aug 2024 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/github/github-cli/</guid><description>As automation becomes an integral part of the development process, GitHub Actions has become an essential component for managing CI/CD workflows in many projects. However, over time, you might accumulate a large number of workflow run records, which can not only take up storage space but also potentially impact performance. In such cases, periodically cleaning up these records becomes crucial. Today, we&amp;rsquo;ll demonstrate how to batch delete GitHub Actions records using a simple Bash script.</description></item><item><title>Get the latest release information of the repos from GitHub</title><link>https://coolbeevip.github.io/posts/github/get-releases-latest-from-github/</link><pubDate>Tue, 12 Dec 2023 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/github/get-releases-latest-from-github/</guid><description>1. Requirements python &amp;gt;= 3.9 pip install beautifulsoup4 2. Create a python script get_latest_info_from_github_repos.py
import requests from bs4 import BeautifulSoup urls = [ &amp;#34;https://github.com/geoserver/geoserver&amp;#34;, &amp;#34;https://github.com/Leaflet/Leaflet&amp;#34;, &amp;#34;https://github.com/Turfjs/turf/&amp;#34; ] def get_latest_version(url) -&amp;gt; tuple: url = url + &amp;#34;/releases/latest&amp;#34; response = requests.get(url) if response.status_code != 200: raise Exception(f&amp;#39;Request failed with status {response.status_code}&amp;#39;) soup = BeautifulSoup(response.text, &amp;#39;html.parser&amp;#39;) version = soup.find(&amp;#39;span&amp;#39;, {&amp;#39;class&amp;#39;: &amp;#39;css-truncate-target&amp;#39;}).get_text(strip=True) datetime = soup.find(&amp;#39;relative-time&amp;#39;).get(&amp;#34;datetime&amp;#34;) return version, datetime for url in urls: version = &amp;#34;UNKNOWN&amp;#34; datetime = &amp;#34;UNKNOWN&amp;#34; try: version, datetime = get_latest_version(url) except Exception as e: pass print(f&amp;#39;{url},{version},{datetime[0:10]}&amp;#39;) 3.</description></item></channel></rss>