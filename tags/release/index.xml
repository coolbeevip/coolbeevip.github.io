<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>release on</title><link>https://coolbeevip.github.io/tags/release/</link><description>Recent content in release on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 May 2022 01:00:00 +0800</lastBuildDate><atom:link href="https://coolbeevip.github.io/tags/release/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Servicecomb Pack Release Guide</title><link>https://coolbeevip.github.io/posts/asf/apache-release-guide/</link><pubDate>Sun, 08 May 2022 01:00:00 +0800</pubDate><guid>https://coolbeevip.github.io/posts/asf/apache-release-guide/</guid><description>注意: 本文档基于 0.7.0 正式版发布过程编写，实际操作时请替换文档中的版本号 0.7.0-SNAPSHOT 和 0.7.0 为实际的版本号。
注意： 开始发布前，请提前一周通过 dev@servicecomb.apache.org 预告即将开始发布，确认代码是否已经准备就绪。
Hello All, Since from last ServiceComb pack 0.6.0 release we have done significant changes so now is the time to release the new version 0.7.0. I will be cutting a new release tomorrow morning from the branch https://github.com/apache/servicecomb-pack/tree/0.7.x . @PMC/@Committers please let me know if there is any important patch we need to merge before this release.</description></item><item><title>Bash script automates the Maven project Git release process</title><link>https://coolbeevip.github.io/posts/git/git-automate-tag-release-process-with-bash/</link><pubDate>Sun, 16 May 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/git/git-automate-tag-release-process-with-bash/</guid><description>开源项目中我们大多采用主干开发模式管理我们的项目，他基本遵循以下规则
所有的 PR 都默认向主干合并 主干上项目的版本号是 -SNAPSHOT 当主干要发布时，我们会建立与之对应的 X 分支（此分支的目的是为了基于此分支发布补丁版本） 基于当前主干去除版本号中的 -SNAPSHOT 后建立与版本对应的 TAG 将主干上的版本号中的 minor 累加一，并在后边增加 -SNAPSHOT 后缀 此过程繁琐，切容易出错。我制作了一个脚本 maven-project-git-release.sh 用来实现这个过程的规范化和自动化
当然，这并不意味着你不需要掌握正手动发布的过程。
由于某种原因导致自动过程中断后，你依然需要手动去处理，所以在使用这个脚本前，请确保你了解这个脚本帮你做了什么工作，以及如何做的。
如何使用 maven-project-git-release.sh 脚本会帮你自动化以下工作
创建一个编译用的目录
目录会创建在你系统的临时目录下，在我的 Mac 系统系统中看起来像 /var/folders/fd/gqdh88px2fj66tmtcy6ffr580000gn/T
在编译用的目录中 git clone 你的仓库代码
你的仓库地址在使用脚本时通过参数指定，像这样 sh maven-project-git-release.sh git@github.com:coolbeevip/license-maven-plugin.git
编译你的代码确保正确
默认在当前仓库根目录下执行 mvn clean package，如果你需要特殊的方式，可以修改脚本中的 check_source_before_release 函数
计算版本号分支名
根据 pom 中的版本定义，自动计算下一版本号，默认采 maven 的3段式版号方式 major.minor.patch，并以此为基准滚动 minor 版本号，如果你需要特殊的方式，可以修改脚本中的 next_version 函数
输出发布计划</description></item></channel></rss>