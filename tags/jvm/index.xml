<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jvm on</title><link>https://coolbeevip.github.io/tags/jvm/</link><description>Recent content in jvm on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Aug 2019 13:24:14 +0800</lastBuildDate><atom:link href="https://coolbeevip.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Important JVM Options</title><link>https://coolbeevip.github.io/posts/java/java-jvm-options/</link><pubDate>Tue, 06 Aug 2019 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/java/java-jvm-options/</guid><description>Heap Memory -XX:MetaspaceSize Metaspace 空间初始大小，如果不设置的话，默认是20.79M。这个初始大小是触发首次 Metaspace Full GC 的阈值，例如 -XX:MetaspaceSize=128M
-XX:MaxMetaspaceSize Metaspace 最大值，默认不限制大小，但是线上环境建议设置，例如 -XX:MaxMetaspaceSize=512M
GC -Xnoclassgc 表示关闭JVM对类的垃圾回收，缺省情况下，当一个类没有任何活动实例时，JVM 就会从内存中卸装该类，但是这样会使性能下降。如果关闭类垃圾回收，就可以消除由于多次装入和卸装同一个类而造成的开销
-XX:+UseParNewGC 设置年轻代为并行收集
-XX:MaxTenuringThreshold 控制新生代需要经历多少次GC​晋升到老年代中的最大阈值，默认值 15
-XX:+CMSParallelRemarkEnabled CMS收集算法步骤如下：初始标记 -&amp;gt; 并发标记 -&amp;gt; 重新标记 -&amp;gt; 标记清除。 其中 初始标记和重新标记都需要STW，即暂停用户线程。 CMSParallelRemarkEnabled参数可以让重新标记阶段进行并行重新标记，减少暂停时间
-XX:SurvivorRatio 设置 Eden、S0、S1 分配比例，默认值是 8
-XX:SurvivorRatio=5 表示 Eden 占 50%，S0、S1 平分剩余空间
-XX:+UseCompressedOops In short, don&amp;rsquo;t turn it on, use a version which has it on by default.
https://stackoverflow.com/questions/11054548/what-does-the-usecompressedoops-jvm-flag-do-and-when-should-i-use-it
-XX:+DisableExplicitGC 禁止 System.gc() 触发 GC 操作，当没有开启 DisableExplicitGC 这个参数时,你会发现JVM每个小时会执行一次Full GC,这是因为JVM在做分布式GC,为RMI服务的, 可以通过 sun.</description></item></channel></rss>