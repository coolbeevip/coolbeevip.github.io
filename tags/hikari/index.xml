<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hikari on</title><link>https://coolbeevip.github.io/tags/hikari/</link><description>Recent content in hikari on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Sep 2021 13:24:14 +0800</lastBuildDate><atom:link href="https://coolbeevip.github.io/tags/hikari/index.xml" rel="self" type="application/rss+xml"/><item><title>The Impact of Undertow Thread Options &amp; Database Connection Pool on Performance</title><link>https://coolbeevip.github.io/posts/java/java-undertow-threads-and-jdbc-pools/</link><pubDate>Thu, 23 Sep 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/java/java-undertow-threads-and-jdbc-pools/</guid><description>Hikari 线程参数和数据库连接池参数对业务吞吐率的影响分析
场景 本例中我们使用 Undertow 作为 Web 容器，使用 Hikari 作为数据库连接池， 并通过 spring.datasource.hikari.maximum-pool-size 和 server.undertow.threads.worker 两个参数的调整，看看对于业务的性能影响有多大
为此我准备了一个简单的 DEMO，并且执行 1000 次请求，并发 100，每次请求执行一个 SLEEP(5) 的 SQL模拟单笔耗时。并在一个 2C 的服务器上测试。应用默认参数如下
spring.datasource.hikari.connection-timeout=30000 spring.datasource.hikari.minimum-idle=10 spring.datasource.hikari.maximum-pool-size=10 server.undertow.threads.worker(默认是 2C*8) 默认参数 $ ab -c 100 -n 1000 http://localhost:6060/test This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1879490 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking localhost (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: Server Hostname: localhost Server Port: 6060 Document Path: /test Document Length: 14 bytes Concurrency Level: 100 Time taken for tests: 510.</description></item></channel></rss>