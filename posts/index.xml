<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>https://coolbeevip.github.io/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 May 2021 13:24:14 +0800</lastBuildDate><atom:link href="https://coolbeevip.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Firewalld 保护 Docker 端口</title><link>https://coolbeevip.github.io/posts/securing-docker-ports-with-firewalld/</link><pubDate>Tue, 11 May 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/securing-docker-ports-with-firewalld/</guid><description>概述 为了保护 Docker 暴露的端口不受外部访问的影响，可以使用 firewalld 配置防火墙规则，只允许特定的 IP 访问。 通过让 firewalld 创建 DOCKER-USER 链，我们可以实现由 firewalld 维护的安全 Docker 端口, Docker 处理 iptables 规则以提供网络隔离，更多详细
本文基于环境
Docker-CE 19.03.12 CentOS Linux release 7.8.2003 Firewall 0.6.3 本文例子:
我们使用 Docker 安装一个 Nginx，并将 80(HTTP) 端口对外映射为 8080，443(HTTPS) 端口对外映射为 8443，并通过 Firewalld 仅允许特定的 IP 访问；提示：后续的防火墙规则中配置的端口是容器内部端口，例如 80，443
192.168.51.246 安装 Nginx Docker
配置 192.168.51.245 可以访问 Nginx Docker
其他机器无法访问 Nginx Docker
重要的事情说三遍
如果你在 Docker 运行时重启 firewalld，那么 firewalld 将删除 DOCKER-USER</description></item><item><title>导出 Maven 项目的依赖报告并分析 LICENSE 信息</title><link>https://coolbeevip.github.io/posts/maven-export-dependencies-analyse-license/</link><pubDate>Sun, 09 May 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/maven-export-dependencies-analyse-license/</guid><description>有的时候我们那需要分析多模块 Maven 项目的依赖使用情况，并希望能够分析出这些依赖的 LICENSE 信息。使用 io.github.coolbeevip:license-maven-plugin 插件 可以生成 TXT 或者 CSV 格式的分析报告
youtube
bilibili
CSV 格式的报告 NOTICE.CSV NOTICE-LICENSE.CSV TXT 格式的报告 NOTICE.TXT NOTICE-LICENSE.TXT 插件 LICENSE-MAVEN-PLUGIN format 导出格式，支持 csv、txt； license 是否分析 LICENSE 信息，默认 false； ignoreGroupIds 忽略 groupId 列表, 多个用逗号分割; timeout 分析 LICENSE 的超时时间，默认 5 秒; 导出报告 在 Maven 项目的根目录执行如下命令
导出 CSV
mvn io.github.coolbeevip:license-maven-plugin:1.5.0:dependency-license-export -Dformat=csv 导出 TXT
mvn io.github.coolbeevip:license-maven-plugin:1.5.0:dependency-license-export -Dformat=txt 提示： 导出的报告位置在 ./target/distribute 目录下
导出报告(忽略部分依赖) mvn io.github.coolbeevip:license-maven-plugin:1.5.0:dependency-license-export -Dformat=csv -DignoreGroupIds=org.</description></item><item><title>Docker Pulling Pushing Batch Shell Script</title><link>https://coolbeevip.github.io/posts/docker-pulling-pushing/</link><pubDate>Mon, 19 Apr 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/docker-pulling-pushing/</guid><description>从源镜像仓库批量拉取镜像，并将这些镜像推送到目标镜像仓库的批量脚本
#!/bin/bash ################################################# # 使用方式 # 从源仓库拉取镜像到本机 # sh docker-images-pulling-pushing.sh pull # # 将本机镜像推送到目的仓库 # sh docker-images-pulling-pushing.sh push # # 清理本机的镜像 # sh docker-images-pulling-pushing.sh clean ################################################# # 源仓库地址 DOCKER_REPO_FROM= # 目标仓库地址 DOCKER_REPO_TO=192.168.2.2:8888/ DOCKER_REPO_TO_USER=test DOCKER_REPO_TO_PASS=Test123456 # 镜像定义 DOCKER_IMAGES=() DOCKER_IMAGES+=(postgres:9.6) DOCKER_IMAGES+=(elasticsearch:6.6.2) DOCKER_IMAGES+=(coolbeevip/servicecomb-pack) # 从源仓库地址拉取镜像到本机仓库 function pull(){ echo &amp;#34;Pull images from $DOCKER_REPO_FROM&amp;#34; for image in ${DOCKER_IMAGES[@]}; do docker pull $DOCKER_REPO_FROM$image done } # 本机镜像推送到目的仓库 function push(){ docker login http://$DOCKER_REPO_TO -u $DOCKER_REPO_TO_USER -p $DOCKER_REPO_TO_PASS echo &amp;#34;Push $DOCKER_REPO_FROMto $DOCKER_REPO_TO&amp;#34; for image in ${DOCKER_IMAGES[@]}; do docker image tag $DOCKER_REPO_FROM$image $DOCKER_REPO_TO$image docker push $DOCKER_REPO_TO$image done } # 清理本机拉取后的镜像 function clean(){ echo &amp;#34;Remove images&amp;#34; docker rmi -f $(docker images | grep $DOCKER_REPO_FROM | awk &amp;#39;{print $3}&amp;#39;) docker rmi -f $(docker images | grep $DOCKER_REPO_TO | awk &amp;#39;{print $3}&amp;#39;) } case &amp;#34;${@: -1}&amp;#34; in pull ) pull ;; clean ) clean ;; push ) push ;; esac</description></item><item><title>MacOS 切换 JDK</title><link>https://coolbeevip.github.io/posts/macos-switch-jdk/</link><pubDate>Thu, 25 Mar 2021 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/macos-switch-jdk/</guid><description>查看本机 JDK 版本 命令行输入 /usr/libexec/java_home -V 可以看到多个 JDK 版本
$ /usr/libexec/java_home -V Matching Java Virtual Machines (2): 11.0.10, x86_64: &amp;#34;OpenJDK 11.0.10&amp;#34; /Users/zhanglei/Library/Java/JavaVirtualMachines/adopt-openj9-11.0.10/Contents/Home 1.8.0_201, x86_64: &amp;#34;Java SE 8&amp;#34; /Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home /Users/zhanglei/Library/Java/JavaVirtualMachines/adopt-openj9-11.0.10/Contents/Home 查看当前使用的 JDK 版本 $ java -version java version &amp;#34;1.8.0_201&amp;#34; Java(TM) SE Runtime Environment (build 1.8.0_201-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) 切换 JDK 切换到 JDK 11.0.10 版本，并查看切换后的 JDK 版本
$ export JAVA_HOME=`/usr/libexec/java_home -v 11.0.10` $ java -version openjdk version &amp;#34;11.</description></item><item><title>常用 MySQL 命令</title><link>https://coolbeevip.github.io/posts/mysql-commands/</link><pubDate>Mon, 11 May 2020 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/mysql-commands/</guid><description>常用 MySQL 命令
连接数配置 查看允许的最大连接数 show variables like &amp;#39;%max_connection%&amp;#39;; 如果过去曾达到此限制，则可以使用以下方法检查 SHOW GLOBAL STATUS LIKE &amp;#39;max_use%&amp;#39;; 配置用户的最大并发连接数 GRANT USAGE ON *.* TO &amp;#39;repl&amp;#39;@&amp;#39;%&amp;#39; WITH MAX_CONNECTIONS_PER_HOUR 100 MAX_USER_CONNECTIONS 10; 查看用户的最大并发连接数 SELECT User, Host, max_connections, max_user_connections FROM mysql.user; 设置最大连接数 set global max_connections=1000; 查看当前连接数 show status like &amp;#39;Threads%&amp;#39;; Threads_cached 当前线程池中缓存有多少空闲线程 Threads_connected 当前的连接数 ( 也就是线程数 ) Threads_running 已经创建的线程总数 Threads_created 当前激活的线程数 ( Threads_connected 中的线程有些可能处于休眠状态 ) thread_cache_size 值过小会导致频繁创建线程，直接反映就是 show status 查看 Threads_created 值过大。 当 Threads_cached 越来越少 但 Threads_connected 始终不降 且 Threads_created 持续升高 这时可适当增加 thread_cache_size 的大小</description></item><item><title>Maven项目和模块的最佳实践</title><link>https://coolbeevip.github.io/posts/best-practices-for-structuring-maven-projects-and-modules/</link><pubDate>Sat, 02 May 2020 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/best-practices-for-structuring-maven-projects-and-modules/</guid><description>本文整理构建Maven项目和模块的最佳实践的关键事项，其中包含依赖、版本、属性、模块划分等关键因素，推荐使用 Maven 3.6.3 及以上版本。 为了便于理解，我们假设有一个 API 网关项目，这个网关项目包含服务端、客户端、通知服务端支持插件。
目标 通过多模块方式组织项目 管理项目版本、依赖，属性 规划模块依赖关系 主项目 POM 每个项目都应该在项目根目录下有一个主 POM 文件，并通过主 POM 文件管理下级子模块。在主 POM 中至少会使用一下标签
properties: 定义字符集编码、JDK 版本、插件版本; modules: 下级子模块; pluginRepositories: 插件仓库地址（非必须，主要解决国内访问慢的问题）; repositories: 定义 Maven 私服地址; distributionManagement: 定义发布用 Maven 私服地址 pluginManagement: 定义管理类插件版本 例如：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;build xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.coolbeevip.apigateway&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;apigateway-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- project --&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt; &amp;lt;maven.compiler.encoding&amp;gt;UTF-8&amp;lt;/maven.compiler.encoding&amp;gt; &amp;lt;maven.compiler.source&amp;gt;8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;maven.compiler.target&amp;gt;8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;!-- plugins version --&amp;gt; &amp;lt;maven-compiler-plugin.version&amp;gt;3.1&amp;lt;/maven-compiler-plugin.version&amp;gt; &amp;lt;jacoco-maven-plugin.version&amp;gt;0.8.6&amp;lt;/jacoco-maven-plugin.version&amp;gt; &amp;lt;docker-maven-plugin.</description></item><item><title>Git Fork 后同步上游分支</title><link>https://coolbeevip.github.io/posts/git-command-rebase-upstream/</link><pubDate>Mon, 06 Apr 2020 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/git-command-rebase-upstream/</guid><description>当你 fork 一个仓库后，可以时用此方法使你 fork 后的仓库 master 分支保持和上游 master 分支的同步
使用 rebase 命令同步上游 master 分支到你本地的 master 分支，并推送到你 fork 后的仓库
git fetch upstream git checkout master git rebase upstream/master git push -f origin master 或者你确定放弃你本地所有的修改，则可以简单的重置为上游版本
git fetch upstream git checkout master git reset --hard upstream/master git push -f origin master 如果你也想同步 master 分支的修改到你的功能分支
git checkout &amp;lt;分支名&amp;gt; git rebase master git push -f origin &amp;lt;分支名&amp;gt;</description></item><item><title>Git Squash Commits</title><link>https://coolbeevip.github.io/posts/git-command-commit-squash/</link><pubDate>Mon, 06 Apr 2020 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/git-command-commit-squash/</guid><description>压缩合并 Commits，将多个 commit 整理合并的方法，这样可以使提交记录更加清晰
查看提交记录，选择你要合并的范围 git log commit 6d757f70af289b5a90d00bd5e4b93d892d64a258 (HEAD -&amp;gt; SCB-1669) Author: Lei Zhang &amp;lt;zhanglei@apache.org&amp;gt; Date: Thu Dec 19 13:53:26 2019 +0800 SCB-1669 Fixed reverse compensation sort bug in FSM commit 37e0c5d99d0e6dae188cbd78f543ba69433b928f (origin/SCB-1669) Author: Lei Zhang &amp;lt;zhanglei@apache.org&amp;gt; Date: Thu Dec 19 02:00:20 2019 +0800 SCB-1669 Fixed Reverse compensation sort bug in FSM commit b4ea8717a86d1eba1956d21727d05c466ff6d8a2 (upstream/master, origin/master, origin/HEAD, master) Author: Lei Zhang &amp;lt;zhanglei@apache.org&amp;gt; Date: Tue Dec 10 16:25:48 2019 +0800 SCB-1658 Improve encapsulation on txEntityMap of SagaData 可以看到最后两次提交，都是为了修复 SCB-1669 这个问题，此时我想合并最后两次提交 6d757f70af289b5a90d00bd5e4b93d892d64a258 和 37e0c5d99d0e6dae188cbd78f543ba69433b928f</description></item><item><title>Git Stash</title><link>https://coolbeevip.github.io/posts/git-command-commit-stash/</link><pubDate>Mon, 06 Apr 2020 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/git-command-commit-stash/</guid><description>你在当前分支上开发代码，此时不想 commit，但是又想切换到其他分支完成其他的工作，此时可以用 stash
在当前分支执行 stash 将当前分支未提交的代码隐藏起来 $ git stash Saved working directory and index state WIP on SCB-1577: 2554be3d SCB-1593 Add notice for Boringssl support ciphers (base) bogon:servicecomb-pack zhanglei$ 此时你可以看到已经存储到一个id为 2554be3d 里了，这时你可以用 git status 查看已经没有要提交的内容了
git status On branch SCB-1577 nothing to commit, working tree clean (base) bogon:servicecomb-pack zhanglei$ 这时你就可以切换到其他分支开始新的工作 (base) bogon:servicecomb-pack zhanglei$ git checkout master Switched to branch &amp;#39;master&amp;#39; Your branch is up to date with &amp;#39;origin/master&amp;#39;.</description></item><item><title>常用 Linux 检测命令</title><link>https://coolbeevip.github.io/posts/linux-commands-check/</link><pubDate>Mon, 06 May 2019 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/linux-commands-check/</guid><description>IO 磁盘IO测试
[root@localhost ~]# dd if=/dev/zero of=./a.dat bs=8K count=1M conv=fdatasync 记录了8192+0 的读入 记录了8192+0 的写出 8589934592字节(8.6 GB)已复制，14.8606 秒，578 MB/秒 [root@localhost ~]# dd if=./a.dat of=/dev/null bs=1M count=8k iflag=direct 记录了8192+0 的读入 记录了8192+0 的写出 8589934592字节(8.6 GB)已复制，14.2462 秒，603 MB/秒</description></item><item><title>常用 Git 命令</title><link>https://coolbeevip.github.io/posts/git-commands/</link><pubDate>Sat, 06 Apr 2019 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/git-commands/</guid><description>常用 Git 命令
Branch 创建分支
git checkout -b &amp;lt;分支名&amp;gt; 推送分支
git push origin &amp;lt;分支名&amp;gt; 修改分支名
git branch -m &amp;lt;旧分支名&amp;gt; &amp;lt;新分支名&amp;gt; 删除本地分支
git branch -D &amp;lt;分支名&amp;gt; 删除远程分支
git push origin --delete &amp;lt;分支名&amp;gt; 拉取远程分支
git fetch origin &amp;lt;分支名&amp;gt; 拉取远程分支并切换
git checkout -b &amp;lt;分支名&amp;gt; origin/&amp;lt;分支名&amp;gt; 当前分支会退到指定版本
git reset --hard &amp;lt;版本号的sha1&amp;gt; Tag 创建本地 Tag
git tag -a &amp;lt;标签名&amp;gt; -m &amp;#34;my tag&amp;#34; 删除本地 Tag
git tag -d &amp;lt;标签名&amp;gt; 删除远程 Tag
git push origin :refs/tags/&amp;lt;标签名&amp;gt; 推送本地所有 Tag 到远程</description></item><item><title>常用 Docker 命令</title><link>https://coolbeevip.github.io/posts/docker-commands/</link><pubDate>Wed, 06 Feb 2019 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/docker-commands/</guid><description>常用 Docker 命令记录
镜像 删除所有镜像 docker rmi -f $(docker images | awk &amp;#39;{print $3}&amp;#39;) 删除所有 dangling 镜像 docker rmi -f $(docker images -a | grep &amp;#34;&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#39;{print $3}&amp;#39;) 导出镜像 docker save -o postgres_9.6.tar postgres:9.6 导入镜像 docker load -i postgres_9.6.tar 容器 删除所有 Exited 容器 docker rm $(docker ps -a | grep Exited | awk &amp;#39;{print $1}&amp;#39;) 停止并删除所有容器 docker stop $(docker ps | awk &amp;#39;{print $1}&amp;#39;) docker rm -f $(docker ps -a | awk &amp;#39;{print $1}&amp;#39;) 停止 dead 容器 删除实例时提示 device or resource busy</description></item><item><title>Flyway hung on the MySQL Router + MGR</title><link>https://coolbeevip.github.io/posts/flyway-hung-on-mysql-router-mgr/</link><pubDate>Thu, 29 Nov 2018 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/flyway-hung-on-mysql-router-mgr/</guid><description>Flyway 连接 MySQL Router 后启动卡在 GET_LOCK 语句
现象 MySQL MGR + Router 部署高可用集群 Flyway 客户端使用 jdbc:mysql:loadbalance 连接 初始化 Schema History 表、或者执行多个 SQL 脚本时 当满足以上条件时，Flyway 会卡在初始化阶段，经过分析发现停顿在执行 GET_LOCK 语句时
原因 Flyway 默认在执行 DDL 脚本时不启用事务，在初始化时 Flyway 会先执行 GET_LOCK 锁定数据库，然后再执行 DDL 脚本。当使用 jdbc:mysql:loadbalance 连接时，会随机选择一个数据源，如果执行 GET_LOCK 和 执行 DDL 不是一个数据源，就会导致执行等待锁释放
解决办法 在启动时设置 group=true 参数，这样 Flyway 在初始化时就会启用事务，确保一个事务内的 DDL 都在一个数据源执行
ISSUE-3154
public class FlywayTestManual { String url=&amp;#34;jdbc:mysql:loadbalance://192.168.51.206:3810,192.168.51.207:3810/nc_notifier?roundRobinLoadBalance=false&amp;amp;characterEncoding=utf8&amp;amp;zeroDateTimeBehavior=convertToNull&amp;amp;useSSL=false&amp;amp;useJDBCCompliantTimezoneShift=true&amp;amp;useLegacyDatetimeCode=false&amp;amp;serverTimezone=GMT%2B8&amp;amp;allowMultiQueries=true&amp;amp;allowPublicKeyRetrieval=true&amp;#34;; String user=&amp;#34;user&amp;#34;; String password=&amp;#34;pass&amp;#34;; @Test public void test(){ Flyway flyway = Flyway.</description></item><item><title>Flyway Support Oracle</title><link>https://coolbeevip.github.io/posts/java-flyway-support-oracle/</link><pubDate>Thu, 29 Nov 2018 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/java-flyway-support-oracle/</guid><description>记录在使用 Flyway 管理 Oracle 数据库脚本时遇到的一些问题，Flyway 5.2.1 - 7.7.3 都存在此问题。
1. Flyway not support Oracle 11g 异常信息
Caused by: org.flywaydb.core.internal.license.FlywayEditionUpgradeRequiredException: Flyway Enterprise Edition or Oracle upgrade required: Oracle 11.2 is no longer supported by Flyway Community Edition, but still supported by Flyway Enterprise Edition. at org.flywaydb.core.internal.database.base.Database.ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition(Database.java:173) at org.flywaydb.core.internal.database.oracle.OracleDatabase.ensureSupported(OracleDatabase.java:91) at org.flywaydb.core.Flyway.execute(Flyway.java:514) at org.flywaydb.core.Flyway.migrate(Flyway.java:159) at org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer.afterPropertiesSet(FlywayMigrationInitializer.java:65) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1855) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1792) ... 19 common frames omitted 修改 Flyway 5.2.4 OracleDatabase.java 社区版本做了版本号限制 修改 Flyway 6.</description></item><item><title>Flyway 补丁脚本合并成全量脚本的步骤</title><link>https://coolbeevip.github.io/posts/java-flyway-merge-script-step/</link><pubDate>Thu, 29 Nov 2018 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/java-flyway-merge-script-step/</guid><description>Flyway 通过 SQL Patch 脚本的方式管理数据库脚本版本，开发一段时间后会积攒大量脚本。当一个版本稳定后我们希望合并成一个全量脚本
1.首先对齐程序与数据库中的脚本版本号 查看程序中脚本版本清单，例如：程序中有三个版本的脚本
V1.0.0.0__init.sql V1.0.0.1__add_user_table.sql V1.0.0.2__modify_user_table.sql 查看数据库中历史版本记录表 (默认是 flyway_schema_history) 中执行过的脚本版本，例如：
versions description script success 1.0.0.0 init.sql V1.0.0.0__init.sql 1 1.0.0.1 add_user_table.sql V1.0.0.1__add_user_table.sql 1 1.0.0.2 modify_user_table V1.0.0.2__modify_user_table.sql 1 这里只摘取了关键字段，你可以看到每个版本都已经执行，并且执行都是成功的 success=1
至此：你已经对齐了程序和数据库中脚本版本号，可以开始准备合并了
2.合并程序中的SQL脚本 合并多个脚本的内容到最大版本号的文件中，例如：将 V1.0.0.0__init.sql, V1.0.0.1__add_user_table.sql, V1.0.0.2__modify_user_table.sql 合并为 V1.0.0.2__init.sql
注意： 不是简单的文件合并，而是最终执行结果的合并
3.重新打包程序 只包含合 V1.0.0.2__init.sql 脚本的程序
4.停止所有老版本的程序 包含 V1.0.0.0__init.sql,V1.0.0.1__add_user_table.sql,V1.0.0.2__modify_user_table.sql 老脚本的程序
5.删除数据库中的版本历史表 默认是 flyway_schema_history
6.重启应用程序 在程序启动时设置基线版本参数为当前版本，设置这个参数的目的是告诉 Flyway 当前已经执行过 1.</description></item><item><title>常用 Maven 命令</title><link>https://coolbeevip.github.io/posts/maven-commands/</link><pubDate>Fri, 23 Nov 2018 13:24:14 +0800</pubDate><guid>https://coolbeevip.github.io/posts/maven-commands/</guid><description>常用 Maven 命令
Parameters -D 指定参数，如 -Dmaven.test.skip=true 跳过单元测试； -P 指定 Profile 配置，可以用于区分环境； -e 显示maven运行出错的信息； -o 离线执行命令,即不去远程仓库更新包； -X 显示maven允许的debug信息； -U 强制去远程更新 snapshot的插件或依赖，默认每天只更新一次。 &amp;ndash;no-snapshot-updates 禁止更新 snapshot Dependency 显示maven依赖数
mvn dependency:tree 显示maven依赖列表
mvn dependency:list 下载依赖包的源码
mvn dependency:sources Maven Wrapper 自动安装 maven 的包装器（适合不想手动安装Maven的用户），使用插件Maven Wrapper plugin将其自动化安装指定版本的 Maven
mvn -N io.takari:maven:wrapper -Dmaven=3.6.3 这个命令会在你的项目中生成如下文件，请将这些文件与源代码一起管理
mvnw: 这是 Linux Script 可执行文件，用来代替 mvn mvnw.cmd: 这是 Windows Script 可执行文件，用来代替 mvn mvn: 隐藏的文件夹，其中包含Maven Wrapper Java库及其属性文件 首次执行 mvnw 或者 mvnw.</description></item></channel></rss>